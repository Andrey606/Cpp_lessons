//===================================================================
// COPYRIGHT amcbridge 2021/03/12
//===================================================================
// CATLogger.cpp
// Header definition of class CATLogger
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/03/12 Creation: Code generated by the 3DS wizard
//===================================================================

#pragma once

#include "CATUnicodeString.h"

//-----------------------------------------------------------------------
class CATLogger
{
public:
enum class eSeverity : char { _INFO = 0, _WARNING, _ERROR };

public:
static CATLogger * getInstance();
CATLogger(CATLogger & other) = delete;
virtual ~CATLogger();
HRESULT Log(const char * logMessage, const char * functionName, const eSeverity severity=eSeverity::_INFO);

private:
CATLogger();
static void GetTime(CATUnicodeString & timeStamp);
static void GetDate(CATUnicodeString & date);
static void GetTmpDir(CATUnicodeString & tmpPath);

private:
static CATLogger * pInstance;
CATUnicodeString _LogFilePath;
CATUnicodeString _LogFileName;
unsigned int _LogFileDesc;
};

CATLogger * CATLogger::pInstance = nullptr;

//-----------------------------------------------------------------------

#define LOG_INFO_MESSAGE(message) do { CATLogger::getInstance()->Log(message, __FUNCTION__, CATLogger::eSeverity::_INFO); } while(0)
#define LOG_WARNING_MESSAGE(message) do { CATLogger::getInstance()->Log(message, __FUNCTION__, CATLogger::eSeverity::_WARNING); } while(0)
#define LOG_ERROR_MESSAGE(message) do { CATLogger::getInstance()->Log(message, __FUNCTION__, CATLogger::eSeverity::_ERROR); } while(0)