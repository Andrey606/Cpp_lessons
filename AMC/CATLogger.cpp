//===================================================================
// COPYRIGHT amcbridge 2021/03/12
//===================================================================
// CATLogger.cpp
// Header definition of class CATLogger
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/03/12 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CATLogger.h"

#include "CATTime.h"
#include "CATStdIO.h" 
#include "CATLib.h"        //CATGetEnv
#include <iostream>

//-----------------------------------------------------------------------------
// CATLogger : constructor
//-----------------------------------------------------------------------------
CATLogger::CATLogger() :
	_LogFileName("CollabAddin_"), _LogFilePath(""), _LogFileDesc(0)
{
	CATUnicodeString date = "";
	GetDate(date);
	GetTmpDir(_LogFilePath);

	_LogFileName.Append(std::move(date));
	_LogFileName.Append(".txt");
	_LogFilePath.Append("\\");
	_LogFilePath.Append(_LogFileName);
}

CATLogger::~CATLogger()
{
	if (_LogFileDesc > 0)
		CATFClose(_LogFileDesc);
}

CATLogger* CATLogger::getInstance()
{
	if (!pInstance)
		pInstance = new CATLogger();
	
	return pInstance;
}

HRESULT CATLogger::Log(const char * logMessage, const char * functionName, const eSeverity severity)
{
	HRESULT rc = E_FAIL;

	rc = CATFOpen(&_LogFilePath, "a", &_LogFileDesc);
	if (SUCCEEDED(rc))
	{
		CATUnicodeString severityStr = "";
		switch (severity)
		{
		case CATLogger::eSeverity::_INFO:
			severityStr = "INFO";
			break;
		case CATLogger::eSeverity::_WARNING:
			severityStr = "WARNING";
			break;
		case CATLogger::eSeverity::_ERROR:
			severityStr = "ERROR";
			break;
		default:
			severityStr = "INFO";
			break;
		}

		unsigned int dataLength = 0;
		CATUnicodeString timeStamp = "";
		GetTime(timeStamp);
		CATUnicodeString sdata(std::move(timeStamp));
		sdata.Append(" ");
		sdata.Append(severityStr);
		sdata.Append(" ");
		sdata.Append(functionName);
		sdata.Append(" ");
		sdata.Append(logMessage);
		sdata.Append("\n");

		rc = CATFWrite(_LogFileDesc, sdata, sdata.GetLengthInChar(), &dataLength);
		if (SUCCEEDED(rc))
		{
			rc = CATFFlush(_LogFileDesc);
			if (FAILED(rc))
			{
				std::cout << std::endl;
				std::cout << "(Log) Error : File" << _LogFilePath.ConvertToChar() << "can not be flushed." << std::endl;
				std::cout << std::endl;
			}
		}
		else
		{
			std::cout << std::endl;
			std::cout << "(Log) Error : File" << _LogFilePath.ConvertToChar() << "can not be written." << std::endl;
			std::cout << std::endl;
		}

		if (FAILED(CATFClose(_LogFileDesc)))
		{
			std::cout << std::endl;
			std::cout << "(Log) Error : File" << _LogFilePath.ConvertToChar() << "can not be closed." << std::endl;
			std::cout << std::endl;
		}
	}
	else
	{
		std::cout << std::endl;
		std::cout << "(Log) Error : File" << _LogFilePath.ConvertToChar() << "can not be opened." << std::endl;
		std::cout << std::endl;
	}

	return rc;
}

void CATLogger::GetTime(CATUnicodeString & timeStamp)
{
	CATTime time = CATTime::GetCurrentLocalTime();
	timeStamp = time.ConvertToString("%H:%M:%S");;
}

void CATLogger::GetDate(CATUnicodeString & date)
{
	CATTime Time = CATTime::GetCurrentLocalTime();
	date = Time.ConvertToString("%Y-%m-%d");
}

void CATLogger::GetTmpDir(CATUnicodeString & tmpPath)
{
	tmpPath = CATGetEnv("CATTemp");
	if (tmpPath.GetLengthInChar() == 0) {
		tmpPath = "c:\tmp";
	}
}